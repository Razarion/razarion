Index: errai-bus/src/main/java/org/jboss/errai/bus/client/util/ManagementConsole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- errai-bus/src/main/java/org/jboss/errai/bus/client/util/ManagementConsole.java	(date 1517950579000)
+++ errai-bus/src/main/java/org/jboss/errai/bus/client/util/ManagementConsole.java	(date 1521059100886)
@@ -32,26 +32,26 @@
  */
 public class ManagementConsole {
   private final ClientMessageBusImpl clientMessageBus;
-  private BusErrorDialog errorDialog;
+  //private BusErrorDialog errorDialog;
   private final Logger logger = LoggerFactory.getLogger(ManagementConsole.class);

   private static final String SEP = "-------------------------------------------------------------------";

   public ManagementConsole(final ClientMessageBusImpl clientMessageBus) {
     this.clientMessageBus = clientMessageBus;
-    this.errorDialog = new BusErrorDialog(clientMessageBus);
+    // this.errorDialog = new BusErrorDialog(clientMessageBus);

     java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ManagementConsole.class.getName());
     ErraiSimpleFormatter esf = new ErraiSimpleFormatter("%5$s");
     ErraiConsoleLogHandler eclh = new ErraiConsoleLogHandler(esf);
-    logger.addHandler(eclh);
+    // logger.addHandler(eclh);
     logger.setUseParentHandlers(false);

     declareDebugFunction();
   }

   public void displayError(final String message, final String additionalDetails, final Throwable e) {
-    errorDialog.addError(message, additionalDetails, e);
+    // errorDialog.addError(message, additionalDetails, e);

     logger.error(message, e);
     logger.debug(additionalDetails, e);
@@ -100,8 +100,8 @@
   }

   private void showErrorConsole() {
-    this.errorDialog.center();
-    this.errorDialog.show();
+    // this.errorDialog.center();
+    // this.errorDialog.show();
   }

   /**
Index: errai-common/src/main/java/org/jboss/errai/common/client/logging/LoggingHandlerConfigurator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- errai-common/src/main/java/org/jboss/errai/common/client/logging/LoggingHandlerConfigurator.java	(date 1517950579000)
+++ errai-common/src/main/java/org/jboss/errai/common/client/logging/LoggingHandlerConfigurator.java	(date 1521059100856)
@@ -72,13 +72,13 @@
     }

     handlers.put(ErraiSystemLogHandler.class, new ErraiSystemLogHandler());
-    logger.addHandler(handlers.get(ErraiSystemLogHandler.class));
+    // logger.addHandler(handlers.get(ErraiSystemLogHandler.class));

     handlers.put(ErraiConsoleLogHandler.class, new ErraiConsoleLogHandler());
-    logger.addHandler(handlers.get(ErraiConsoleLogHandler.class));
+    // logger.addHandler(handlers.get(ErraiConsoleLogHandler.class));

     handlers.put(ErraiDevelopmentModeLogHandler.class, new ErraiDevelopmentModeLogHandler());
-    logger.addHandler(handlers.get(ErraiDevelopmentModeLogHandler.class));
+    // logger.addHandler(handlers.get(ErraiDevelopmentModeLogHandler.class));

     instance = this;
   }
Index: errai-jaxrs/errai-jaxrs-client/src/main/java/org/jboss/errai/enterprise/client/jaxrs/JacksonTransformer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- errai-jaxrs/errai-jaxrs-client/src/main/java/org/jboss/errai/enterprise/client/jaxrs/JacksonTransformer.java	(date 1517950579000)
+++ errai-jaxrs/errai-jaxrs-client/src/main/java/org/jboss/errai/enterprise/client/jaxrs/JacksonTransformer.java	(date 1521037469635)
@@ -124,6 +124,9 @@
             if (arr.get(i).isObject() != null && arr.get(i).isObject().get(NUMERIC_VALUE) != null) {
               arr.set(i, arr.get(i).isObject().get(NUMERIC_VALUE));
             }
+            else if(arr.get(i).isArray() != null) {
+              arr.set(i, toJackson(arr.get(i).isArray(), null, null, objectCache));
+            }
             else if (arr.get(i).isObject() != null) {
               arr.set(i, toJackson(arr.get(i), null, null, objectCache));
             }
@@ -157,7 +160,7 @@
         }
         else if (k.startsWith(SerializationParts.EMBEDDED_JSON)) {
           final JSONValue newKey = JSONParser.parseStrict((k.substring(SerializationParts.EMBEDDED_JSON.length())));
-          JSONValue value = obj.get(k);
+          JSONValue value = toJackson(obj.get(k), k, null, objectCache);
           JSONObject tmpObject = new JSONObject();
           toJackson(newKey, QUALIFIED_VALUE, tmpObject, objectCache);

@@ -174,6 +177,11 @@

         toJackson(obj.get(k), k, obj, objectCache);
       }
+    } else if(val.isArray() != null) {
+      JSONArray arr = val.isArray();
+      for (int i = 0; i < arr.size(); i++) {
+        arr.set(i, toJackson(arr.get(i), key, parent, objectCache));
+      }
     }

     return (obj != null) ? cleanUpEmbeddedJson(obj) : val;
@@ -259,10 +267,23 @@
       }

       for (int i = 0; i < arr.size(); i++) {
-        arr.set(i, fromJackson(arr.get(i), QUALIFIED_VALUE, null, objectId));
+        fromJacksonIfInnerArray(objectId, arr, i);
       }
     }

     return val;
   }
+
+  private static void fromJacksonIfInnerArray(int[] objectId, JSONArray arr, int i) {
+    JSONValue jsonValue = arr.get(i);
+    JSONArray innerArr = jsonValue.isArray();
+    if(innerArr != null) {
+      for (int j = 0; j < innerArr.size(); j++) {
+        fromJacksonIfInnerArray(objectId, innerArr, j);
+      }
+    } else {
+      arr.set(i, fromJackson(jsonValue, QUALIFIED_VALUE, null, objectId));
+    }
+  }
+
 }
