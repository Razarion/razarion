precision mediump float;

varying vec2 vTextureCoord;
varying vec3 vLightWeighting;
varying vec4 vShadowCoord;
varying float vEdgePosition;

uniform sampler2D uSamplerTop;
uniform sampler2D uSamplerBlend;
uniform sampler2D uSamplerBottom;
uniform sampler2D uSamplerShadow;
uniform float uEdgeDistance;

void main(void) {
    // Shadow
    float zNdc = vShadowCoord.z / vShadowCoord.w;
    mat4 coordCorrectionMatrix = mat4(0.5, 0.0, 0.0, 0.0,
                                 0.0, 0.5, 0.0, 0.0,
                                 0.0, 0.0, 0.5, 0.0,
                                 0.5, 0.5, 0.5, 1.0);
    vec4 coordShadowMap = coordCorrectionMatrix * vShadowCoord;
    float zMap = texture2D(uSamplerShadow, coordShadowMap.st / coordShadowMap.w).r;
    float shadowFactor;
    if(zMap > zNdc + 0.001) {
        shadowFactor = 1.0;
    } else {
        shadowFactor = 0.5;
    }

    // Surface
    vec4 textureColorTop = texture2D(uSamplerTop, vec2(vTextureCoord.s, vTextureCoord.t));
    vec4 textureColorBlend = texture2D(uSamplerBlend, vec2(vTextureCoord.s, vTextureCoord.t));
    textureColorBlend = smoothstep(vEdgePosition - uEdgeDistance, vEdgePosition + uEdgeDistance, textureColorBlend);
    vec4 textureColorBottom = texture2D(uSamplerBottom, vec2(vTextureCoord.s, vTextureCoord.t));
    vec4 texture = mix(textureColorTop, textureColorBottom, textureColorBlend);
    gl_FragColor = vec4(texture.rgb * vLightWeighting * shadowFactor, 1.0);
}

