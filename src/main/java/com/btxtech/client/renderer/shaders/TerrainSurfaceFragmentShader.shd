precision mediump float;

varying vec2 vTextureCoord;
varying vec3 vLightWeighting;
varying vec4 vShadowCoord;
varying float vEdgePosition;

uniform sampler2D uSamplerTop;
uniform sampler2D uSamplerBlend;
uniform sampler2D uSamplerBottom;
uniform sampler2D uSamplerShadow;
uniform float uEdgeDistance;

void main(void) {
    // Shadow
    // float actualDistance = length(vShadowCoord.xyz) / vShadowCoord.w;
    float ndcZ = vShadowCoord.z / vShadowCoord.w;
    mat4 coordCorrectionMatrix = mat4(0.5, 0.0, 0.0, 0.0,
                                 0.0, 0.5, 0.0, 0.0,
                                 0.0, 0.0, 0.5, 0.0,
                                 0.5, 0.5, 0.5, 1.0);
    vec4 coordShadowMap = coordCorrectionMatrix * vShadowCoord;
    float z = texture2D(uSamplerShadow, coordShadowMap.st / coordShadowMap.w).r;
    vec4 shadowMapColor = vec4(z, z, z, 1.0);
    float shadowFactor;
    if(z > ndcZ) {
        shadowFactor = 1.0;
    } else {
        shadowFactor = 0.5;
    }


    // float grey = 2.0 / (2000.0 - z*2000.0);
    // vec4 color = vec4(grey, grey, grey, 1.0);
    // gl_FragColor = color;



    //gl_FragColor = vec4(depthShadowMap, depthShadowMap, depthShadowMap, 1.0);
    //float shadowFactor;
    //if(depthShadowMap > 0.85) {
    //    shadowFactor = 1.0;
   // } else {
   //     shadowFactor = 0.0;
   // }

    // Surface
    vec4 textureColorTop = texture2D(uSamplerTop, vec2(vTextureCoord.s, vTextureCoord.t));
    vec4 textureColorBlend = texture2D(uSamplerBlend, vec2(vTextureCoord.s, vTextureCoord.t));
    textureColorBlend = smoothstep(vEdgePosition - uEdgeDistance, vEdgePosition + uEdgeDistance, textureColorBlend);
    vec4 textureColorBottom = texture2D(uSamplerBottom, vec2(vTextureCoord.s, vTextureCoord.t));
    vec4 texture = mix(textureColorTop, textureColorBottom, textureColorBlend);
    gl_FragColor = vec4(texture.rgb * vLightWeighting * shadowFactor, 1.0);
    // vec4 result = vec4(texture.rgb * vLightWeighting * shadowFactor, 1.0);
    // gl_FragColor = mix(shadowMapColor, result, 0.5);
}

